These are notes on the application development process and to show best 
practices of application design in the c programming language.


Developing application on Linux course: 
https://training.linuxfoundation.org/linux-courses/development-training/developing-applications-for-linux

Design considerations:
1) Error handling
2) Signal handling
3) Performance issues
4) Logging of code, errors, and events within the application (application log, histogram ..., bottlenecks, checkpoint success and failures) 
   https://en.wikipedia.org/wiki/Event_(computing)
5) Memory Leaks
6) Application security from known flaws within the operating system, IPC, etc
7) Communication from machine to machine 
8) Communication from processor to processor
9) Timeouts --> https://en.wikipedia.org/wiki/Timeout_(computing)
10) Configuration files for the application.
11) scheduling issues
12) Run-time errors "When it compiles without errors" and when the errors are generated after
    compilation and execution."The operating system is suppose to detect the problems and raise
    an run-time error" --->https://www.quora.com/In-C-programming-what-is-runtime-error-and-how-can-it-be-resolved
13) Documentation
14) Test points
15) GUI interface and documentation
16) Refine and document your naming convention and make sure that you site sources and include dates as well.
17) Applications status dump from the GUI or signal if GUI is not responding: needs to dump application status for debugging.
18) Functions should return EXIT_SUCCESS or EXIT_FAILURE given the task of the function indicating if the task was 
     completed or not. EXIT_SUCCESS should be at the end of the function.
...
	 
EXIT_FAILURE  1 or non-zero value
EXIT_SUCCESS  0
true 1
false 0
    
NASA naming convention
• Variables: Use lower-case words separated by underscores.
• Function names: Capitalize the first letter of each word; do not use
   underscores. "However I use first letter lowercase and proceeding words connected but capitalize for now."
• Constants: Use upper-case words separated by underscores.

*Use tabs instead of spaces for formatting

Note: code coverage, make sure you test the application.

Keywords:range, domain,code coverage, positive and negative test,...

/*signals that should be handled in application development. 
***https://en.wikipedia.org/wiki/Signal_(IPC)#SIGTRAP
After reading man 7 signal
I have determine that in my application I will handle all signals that can 
terminate a process indicated by '*'
kill -l
https://github.com/otikkito/cWorld/blob/master/Docs/cManPages/signal.pdf
http://man7.org/linux/man-pages/man7/signal.7.html
 1) SIGHUP	 2) SIGINT	 3) SIGQUIT	 4) SIGILL	 5) SIGTRAP
 6) SIGABRT	 7) SIGBUS	 8) SIGFPE	 9) SIGKILL	10) SIGUSR1
11) SIGSEGV	12) SIGUSR2	13) SIGPIPE	14) SIGALRM	15) SIGTERM
16) SIGSTKFLT	17) SIGCHLD	18) SIGCONT	19) SIGSTOP	20) SIGTSTP
21) SIGTTIN	22) SIGTTOU	23) SIGURG	24) SIGXCPU	25) SIGXFSZ
26) SIGVTALRM	27) SIGPROF	28) SIGWINCH	29) SIGIO	30) SIGPWR
31) SIGSYS	34) SIGRTMIN	35) SIGRTMIN+1	36) SIGRTMIN+2	37) SIGRTMIN+3
38) SIGRTMIN+4	39) SIGRTMIN+5	40) SIGRTMIN+6	41) SIGRTMIN+7	42) SIGRTMIN+8
43) SIGRTMIN+9	44) SIGRTMIN+10	45) SIGRTMIN+11	46) SIGRTMIN+12	47) SIGRTMIN+13
48) SIGRTMIN+14	49) SIGRTMIN+15	50) SIGRTMAX-14	51) SIGRTMAX-13	52) SIGRTMAX-12
53) SIGRTMAX-11	54) SIGRTMAX-10	55) SIGRTMAX-9	56) SIGRTMAX-8	57) SIGRTMAX-7
58) SIGRTMAX-6	59) SIGRTMAX-5	60) SIGRTMAX-4	61) SIGRTMAX-3	62) SIGRTMAX-2
63) SIGRTMAX-1	64) SIGRTMAX	
 */
------------
Episode 494: Robert Seacord on Avoiding Defects in C Programming
https://www.se-radio.net/2022/01/episode-494-robert-seacord-on-avoiding-defects-in-c-programming/
------------
Episode 520: John Ousterhout on A Philosophy of Software Design
https://www.se-radio.net/2022/07/episode-520-john-ousterhout-on-a-philosophy-of-software-design/
------------
Algorithms: https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011 
Erik Demaine, and Srini Devadas. 6.006 Introduction to Algorithms. Fall 2011. Massachusetts Institute of Technology: MIT OpenCourseWare, https://ocw.mit.edu. License: Creative Commons BY-NC-SA.
------------
/*
* I need to find a better way to handle signals and find out what are 
* important signals that I need to handle.
* man sigaction
* man 7 signal
*handling of the signals
*https://gcc.gnu.org/bugzilla/show_bug.cgi?id=56018
*https://netbeans.org/bugzilla/show_bug.cgi?id=191390
*/
...
--------------------------------------------------------------------------------
Application Security
--------------------
Terms
Asset: Resource of value such as the data in a database, money in an account, file on the filesystem or any system resource.
Vulnerability: A weakness or gap in security program that can be exploited by threats to gain unauthorized access to an asset.
Attack or exploit:  An action taken to harm an asset.
Threat: Anything that can exploit a vulnerability and obtain, damage, or destroy an asset.

Application threats and attacks
-------------------------------
Category 	Threats / Attacks
Input Validation 	Buffer overflow; cross-site scripting; SQL injection; canonicalization
Software Tampering 	Attacker modifies an existing application's runtime behavior to perform unauthorized actions; exploited via binary patching, code substitution, or code extension
Authentication 	Network eavesdropping; Brute force attack; dictionary attacks; cookie replay; credential theft
Authorization 	Elevation of privilege; disclosure of confidential data; data tampering; luring attacks
Configuration management 	Unauthorized access to administration interfaces; unauthorized access to configuration stores; retrieval of clear text configuration data; lack of individual accountability; over-privileged process and service accounts
Sensitive information 	Access sensitive code or data in storage; network eavesdropping; code/data tampering
Session management 	Session hijacking; session replay; man in the middle
Cryptography 	Poor key generation or key management; weak or custom encryption
Parameter manipulation 	Query string manipulation; form field manipulation; cookie manipulation; HTTP header manipulation
Exception management 	Information disclosure; denial of service
Auditing and logging 	User denies performing an operation; attacker exploits an application without trace; attacker covers his or her tracks
Injection 	SQL injection; NoSQL; OS Command; Object-relational mapping; LDAP injection
Broken authentication 	Credential stuffing; brute force attacks; weak passwords
Sensitive data exposure 	Weak cryptography; un-enforced encryption
XML external entities 	XML external entity attack
Broken access control 	CORS misconfiguration; force browsing; elevation of privilege
Security misconfiguration 	Unpatched flaws; failure to set security values in settings; out of date or vulnerable software
Cross-site scripting (XSS) 	Reflected XSS; Stored XSS; DOM XSS
Insecure deserialization 	Object and data structure is modified; data tampering
Using components with known vulnerabilities 	Out of date software; failure to scan for vulnerabilities; failure to fix underlying platform frameworks; failure to updated or upgraded library compatibility
Insufficient logging & monitoring 	Failure to log auditable events; failure to generate clear log messages: inappropriate alerts; failure to detect or alert for active attacks in or near real-time 

Ref:
Wikipedia contributors, "Application security," Wikipedia, The Free Encyclopedia, https://en.wikipedia.org/w/index.php?title=Application_security&oldid=1020206045 (accessed May 17, 2021). 
--------------------------------------------------------------------------------
