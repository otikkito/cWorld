Error Functions
-many of the functions in the library set status indicators when error
or end of file occur.
The integer expression "errno" declared in <errno.h> may contain an error
number that gives further information about the most recent error
------
void clearerr(FILE *stream)
int feof(FILE *stream)
int ferror(FILE *stream)
void perror(const char *s)
------
use
void abort(void)
void exit(int status)
      |->EXIT_SUCCESS
      |->EXIT_FAILURE

------
int atexit(void (*fcn)(void))

Test - reduce erros and increase accuracy
-Test for accuracy
-Test for repeatability of a function
-test for maximizing uptime through proper handling of errors
-positive and negative test for return codes
-logging of return codes
-logging of how long an application has been running
--logging of signals of an application
-test for code path
-complete halt of a program once an error has occured during the intial design stage and the line number where the error occured.
-for safety
-test for non loss of data and non corruption
-test for invalid inputs and logging of such inputs and the values
-make sure you have all warnings and pedantic error checking
-maximize up time and code coverage
-when creating function ensure that there is dichotomy between return type or ensure that each different return type maps to one return condition
-"quick test on these return values are easily done with for instance an ‘if statement’" ref: http://www.geeksforgeeks.org/error-handling-c-programs/

Self healing software notes:


links:
https://www.tomsguide.com/us/darpa-self-healing-software,news-17761.html
https://www.tutorialspoint.com/cprogramming/c_error_handling.htm


Program correctness
-the proof of correctness of programs, use the rules of inference and proof techniques including mathematical induction
-A program is said to be correct if it produces the correct output for every possible input.

A proof that a programs in correct consists of two parts.
1)show that the correct answer is obtained if the program terminates.
2)That the program always terminates

--initial assertion
--final assertion

Check for blocking and nonblocking system calls

Error handling
https://en.wikibooks.org/wiki/C_Programming/Error_handling


--------------------------------------------------------------------------
Yes, there are systematic ways to log errors and generate error codes in C to help identify specific issues. Here’s a structured approach:

### 1. **Define Error Codes**
   - Use an `enum` to define meaningful error codes for your application:
     ```c
     typedef enum {
         SUCCESS = 0,
         FILE_NOT_FOUND,
         MEMORY_ALLOCATION_FAILED,
         INVALID_INPUT,
         UNKNOWN_ERROR
     } ErrorCode;
     ```

### 2. **Centralized Error Logging**
   - Create a function to log errors consistently:
     ```c
     #include <stdio.h>

     void logError(ErrorCode code, const char *message) {
         const char *errorMessages[] = {
             "Success",
             "File not found",
             "Memory allocation failed",
             "Invalid input",
             "Unknown error"
         };

         fprintf(stderr, "Error [%d]: %s - %s\n", code, errorMessages[code], message);
     }
     ```

### 3. **Return Error Codes**
   - Ensure functions return error codes to indicate success or failure:
     ```c
     ErrorCode readFile(const char *filename) {
         FILE *file = fopen(filename, "r");
         if (!file) {
             return FILE_NOT_FOUND;
         }
         // Perform file operations...
         fclose(file);
         return SUCCESS;
     }
     ```

### 4. **Error Handling in Main Logic**
   - Check and handle error codes in your main program:
     ```c
     int main() {
         ErrorCode result = readFile("example.txt");
         if (result != SUCCESS) {
             logError(result, "Failed to read the file.");
             return result;
         }
         printf("File read successfully.\n");
         return SUCCESS;
     }
     ```

### 5. **Use `errno` for System Errors**
   - For system-level errors, use the `errno` variable along with `perror()` or `strerror()` to log detailed error messages:
     ```c
     #include <errno.h>
     #include <string.h>

     void logSystemError(const char *message) {
         fprintf(stderr, "System Error [%d]: %s - %s\n", errno, strerror(errno), message);
     }
     ```

### 6. **Optional: Use Macros for Simplification**
   - Macros can simplify error handling:
     ```c
     #define CHECK_ERROR(condition, code, message) \
         if (condition) { \
             logError(code, message); \
             return code; \
         }
     ```

### Benefits of This Approach:
- **Consistency**: Centralized error handling makes debugging easier.
- **Readability**: Clear error codes and messages improve code maintainability.
- **Scalability**: Adding new error codes or logging mechanisms is straightforward.

This method ensures that errors are logged systematically and that each error code points to a specific issue. Let me know if you'd like help implementing this in your project!

