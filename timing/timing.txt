/* https://en.wikipedia.org/wiki/Time
 * man clock_gettime
 * https://stackoverflow.com/questions/6749621/how-to-create-a-high-resolution-timer-in-linux-to-measure-program-performance
 * "If you want to compute the elapsed time between two events observed on the 
 * one machine without an intervening reboot, CLOCK_MONOTONIC is the best option." 
 * 
 * 
 * http://www.catb.org/esr/time-programming/
 */

/*
 
	
https://stackoverflow.com/questions/16740014/computing-time-in-linux-granularity-and-precision

On Linux, the available timers with increasing granularity are:

    clock() from <time.h> (20ms or 10ms resolution?)

    gettimeofday() from Posix <sys/time.h> (microseconds)

    clock_gettime() on Posix (nanoseconds?)


 */

---------
real
It represents time taken by command to execute since its initiation to its termination
user
It represents the amount of time that command/program took to execute its own code
sys
It represents time taken by Unix to fire the command
----------
/*
 struct timespec
time_t  tv_sec    Seconds.
long    tv_nsec   Nanoseconds.
 * 
 *POSIX.1b
 *milliseconds = nanoseconds รท 1,000,000
*nanoseconds = milliseconds x 1,000,000
*A microsecond is equal to 1000 nanoseconds
*stuct timespec
 *time_t  tv_sec    Seconds.
 *long    tv_nsec   Nanoseconds.
 *time_t and clock_t shall be integer or real-floating types (man type.h)
*/
/*the different resolution for sleep are listed below:
 man clock_nanosleep
 man nanosleep
 
 * 
 */


  /*Function prototype*/
  /*struct timerstruc convert_timespect(struct timestruc temp)*/
